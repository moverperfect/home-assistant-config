#
# living_room (nodemcu_1): Living Room temperature sensor and TV ping
#
# This ESPHome code is used on a nodemcu esp8266.
# It does temperature sensing and detects the on/off status of the Living Room TV
#
# It has 4 outputs:
# Living Room Temperature
# Living Room Humidity
# Living Room Heat Index
# Living Room TV
#
# Climate sensing is done by a DHT22 and handled by a custom sensor every 60 seconds,
# data is also uploaded to Thingspeak
#
# TV Status sensing is done by a custom ping sensor run every 15 seconds
#
substitutions:
  devicename: "living_room"
  upper_devicename: "Living Room"
  mqtt_password: !secret mqtt_password
  mqtt_channel: !secret living_room_mqtt_channel
  mqtt_api: !secret living_room_mqtt_api
  tv_ip_address: !secret tv_ip_address

esphome:
  name: $devicename
  platform: ESP8266
  board: nodemcuv2
  includes:
    - dht22_mqtt.h
    - Ping.h
  libraries:
    - "DHT sensor library"
    - "PubSubClient"
    - "ESP8266Ping"
    - "Adafruit Unified Sensor"

wifi:
  ssid: !secret wifi_ssid_1
  password: !secret wifi_pwd_1

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$upper_devicename Fallback Hotspot"
    password: !secret fallback_pwd

captive_portal:

# Enable logging
logger:
  level: !secret debug_level
  esp8266_store_log_strings_in_flash: !secret debug_esp8266_store_log_strings_in_flash

# Enable Home Assistant API
api:
  password: !secret ha_api_pwd

ota:
  password: !secret ota_api_pwd
    
web_server:
  port: 80

sensor:
- platform: custom
  lambda: |-
    auto my_sensor = new DHT22MQTTSensor();
    my_sensor->mqttPassword = (char*)"$mqtt_password";
    my_sensor->mqttChannel = "$mqtt_channel";
    my_sensor->apikey = "$mqtt_api";
    App.register_component(my_sensor);
    return {my_sensor->temperature_sensor, my_sensor->humidity_sensor, my_sensor->heat_index};

  sensors:
  - name: "$upper_devicename Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
  - name: "$upper_devicename Humidity"
    unit_of_measurement: "%"
    accuracy_decimals: 1
    icon: mdi:water-percent
  - name: "$upper_devicename Heat Index"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"

binary_sensor:
- platform: custom
  lambda: |-
    auto my_custom_sensor = new PingSensor();
    uint8_t ipAddress[4] = $tv_ip_address;
    my_custom_sensor->ipAddress[0] = ipAddress[0];
    my_custom_sensor->ipAddress[1] = ipAddress[1];
    my_custom_sensor->ipAddress[2] = ipAddress[2];
    my_custom_sensor->ipAddress[3] = ipAddress[3];
    App.register_component(my_custom_sensor);
    return {my_custom_sensor};

  binary_sensors:
    name: "$upper_devicename TV"